@model BlogSimple.Model.ViewModels.AccountViewModels.MyProfileViewModel;

@{
    ViewData["Title"] = "My Profile";
    Layout = "~/Views/Account/_DashboardAccountLayout.cshtml";
}

<div class="m-5">
    <h1 class="text-left mt-5">My Profile</h1>
    <br />
    <br />

    <div>
        <div class="form-group myprofile-img-container">
            <img class="myaccount-user-profile-img" src="data:image/jpg;base64,@Convert.ToBase64String(Model.AccountUser.ProfilePicture)" alt="@Model.AccountUser.UserName Bio Image" />
            <br />
            <br />
        </div>

        <form asp-controller="Account" asp-action="UpdateUserProfilePicture" method="post" enctype="multipart/form-data">
            <div asp-validation-summary="ModelOnly" class="text-danger validation-summary"></div>

            <input asp-for="AccountUser.Id" readonly hidden />

            <div class="form-group">
                <label asp-for="AccountUser.ProfilePictureInput">Profile Picture</label>
                <div class="form-floating mb-3">
                    <div class="custom-file">
                        <input asp-for="AccountUser.ProfilePictureInput" class="form-control" accept="image/*" />
                    </div>
                </div>
            </div>
            <input id="profileSubmitBtn" type="submit" value="Update" class="hero-btn" />
            <br />
        </form>
        <br />
        <br />


        <form asp-controller="Account" asp-action="UpdateAuthor" method="post" enctype="multipart/form-data">
            <div asp-validation-summary="ModelOnly" class="text-danger validation-summary"></div>

            Update Bio
            <div class="form-floating mb-3">
                <input asp-for="AccountUser.PortfolioLink" class="form-control" />
                <label asp-for="AccountUser.PortfolioLink"></label>
                <span asp-validation-for="AccountUser.PortfolioLink" class="text-danger"></span>
            </div>
            <div class="form-floating mb-3">
                <input asp-for="AccountUser.TwitterLink" class="form-control" />
                <label asp-for="AccountUser.TwitterLink"></label>
                <span asp-validation-for="AccountUser.TwitterLink" class="text-danger"></span>
            </div>
            <div class="form-floating mb-3">
                <input asp-for="AccountUser.GitHubLink" class="form-control" />
                <label asp-for="AccountUser.GitHubLink"></label>
                <span asp-validation-for="AccountUser.GitHubLink" class="text-danger"></span>
            </div>
            <div class="form-floating mb-3">
                <input asp-for="AccountUser.LinkedInLink" class="form-control" />
                <label asp-for="AccountUser.LinkedInLink"></label>
                <span asp-validation-for="AccountUser.LinkedInLink" class="text-danger"></span>
            </div>
            <br />
            <div class="form-floating mb-3">
                <input asp-for="AccountUser.Heading" class="form-control" type="text" />
                <label asp-for="AccountUser.Heading">Heading</label>
                <span asp-validation-for="AccountUser.Heading" class="text-danger"></span>
            </div>
            <br />
            Content: <i>Introduce yourself and talk about your background!</i>
            <br />
            <div class="form-floating mb-3">
                <textarea asp-for="AccountUser.Bio" id="myEditor" class="form-control" type="text"></textarea>
                <span asp-validation-for="AccountUser.Bio" class="text-danger"></span>
            </div>
            <div class="mt-4 mb-0">
                <input id="bioSubmitBtn" type="submit" value="Update" class="hero-btn" />
            </div>
        </form>

        <br />
        <br />

        <div class="text-left">
            <h4>Account Details - @Model.AccountUser.UserName</h4>
            <hr />
            <table class="table">
                <tr>
                    <th scope="row">First Name</th>
                    <td>@Model.AccountUser.FirstName</td>
                </tr>
                <tr>
                    <th scope="row">Last Name</th>
                    <td>@Model.AccountUser.LastName</td>
                </tr>
                <tr>
                    <th scope="row"> UserName</th>
                    <td>@Model.AccountUser.UserName</td>
                </tr>
                <tr>
                    <th scope="row">Email Address</th>
                    <td>@Model.AccountUser.Email</td>
                </tr>
                <tr>
                    <th scope="row">Joined On</th>
                    <td>@Model.AccountUser.CreatedOn</td>
                </tr>
                <tr>
                    <th scope="row">Posts Published</th>
                    <td>@Model.PublishedPostsCount</td>
                </tr>
                <tr>
                    <th scope="row">Posts Favorited</th>
                    <td>@Model.SavedPostsCount</td>
                </tr>
                <tr>
                    <th scope="row">Total Comments</th>
                    <td>@Model.TotalCommentsAndRepliesCount</td>
                </tr>
                <tr>
                    <th scope="row">Total Comments Liked</th>
                    <td>@Model.TotalCommentsLiked</td>
                </tr>
                <tr>
                    <th scope="row">Total Words Posted</th>
                    <td>@Model.TotalWordsCount</td>
                </tr>
                <tr>
                    <th scope="row">Total Minutes of Read</th>
                    <td>
                        @{
                            int avgWordsPerMin = 175;
                            int result = Model.TotalWordsCount / avgWordsPerMin;
                        }
                        @result mins
                    </td>
                </tr>
            </table>
            <br />
            <br />
        </div>
    </div>
</div>


<!-- CK Editor -->
<script src="~/ckeditor/build/ckeditor.js"></script>
<script>
    const profileSubmitBtn = document.querySelector('#profileSubmitBtn');
    const formSubmitBtn = document.querySelector('#bioSubmitBtn');

    profileSubmitBtn.addEventListener('click', (e) => {
        setTimeout(() => {
            profileSubmitBtn.disabled = true;
            profileSubmitBtn.value = "Loading...";
        }, 50);
    });


    bioSubmitBtn.addEventListener('click', (e) => {
        setTimeout(() => {
            bioSubmitBtn.disabled = true;
            bioSubmitBtn.value = "Loading...";
        }, 50);
    });

    class MyUploadAdapter {
        constructor(loader) {
            // The file loader instance to use during the upload. It sounds scary but do not
            // worry — the loader will be passed into the adapter later on in this guide.
            this.loader = loader;
        }

        // Starts the upload process.
        upload() {
            return this.loader.file
                .then(file => new Promise((resolve, reject) => {
                    this._initRequest();
                    this._initListeners(resolve, reject, file);
                    this._sendRequest(file);
                }));
        }

        // Aborts the upload process.
        abort() {
            if (this.xhr) {
                this.xhr.abort();
            }
        }

        // Initializes the XMLHttpRequest object using the URL passed to the constructor.
        _initRequest() {
            const xhr = this.xhr = new XMLHttpRequest();

            // Note that your request may look different. It is up to you and your editor
            // integration to choose the right communication channel. This example uses
            // a POST request with JSON as a data structure but your configuration
            // could be different.
            xhr.open('POST', "/Post/UploadImage", true);
            xhr.responseType = 'json';
        }

        // Initializes XMLHttpRequest listeners.
        _initListeners(resolve, reject, file) {
            const xhr = this.xhr;
            const loader = this.loader;
            const genericErrorText = `Couldn't upload file: ${file.name}.`;

            xhr.addEventListener('error', () => reject(genericErrorText));
            xhr.addEventListener('abort', () => reject());
            xhr.addEventListener('load', () => {
                const response = xhr.response;

                // This example assumes the XHR server's "response" object will come with
                // an "error" which has its own "message" that can be passed to reject()
                // in the upload promise.
                //
                // Your integration may handle upload errors in a different way so make sure
                // it is done properly. The reject() function must be called when the upload fails.
                if (!response || response.error) {
                    return reject(response && response.error ? response.error.message : genericErrorText);
                }

                // If the upload is successful, resolve the upload promise with an object containing
                // at least the "default" URL, pointing to the image on the server.
                // This URL will be used to display the image in the content. Learn more in the
                // UploadAdapter#upload documentation.
                resolve({
                    default: response.url
                });
            });

            // Upload progress when it is supported. The file loader has the #uploadTotal and #uploaded
            // properties which are used e.g. to display the upload progress bar in the editor
            // user interface.
            if (xhr.upload) {
                xhr.upload.addEventListener('progress', evt => {
                    if (evt.lengthComputable) {
                        loader.uploadTotal = evt.total;
                        loader.uploaded = evt.loaded;
                    }
                });
            }
        }

        // Prepares the data and sends the request.
        _sendRequest(file) {
            // Prepare the form data.
            const data = new FormData();

            data.append('upload', file);

            // Important note: This is the right place to implement security mechanisms
            // like authentication and CSRF protection. For instance, you can use
            // XMLHttpRequest.setRequestHeader() to set the request headers containing
            // the CSRF token generated earlier by your application.

            // Send the request.
            this.xhr.send(data);
        }
    }

    function MyCustomUploadAdapterPlugin(editor) {
        editor.plugins.get('FileRepository').createUploadAdapter = (loader) => {
            // Configure the URL to the upload script in your back-end here!
            return new MyUploadAdapter(loader);
        };
    }

    ClassicEditor
        .create(document.querySelector('#myEditor'), {
            extraPlugins: [MyCustomUploadAdapterPlugin],
        })
        .catch(error => {
            console.error(error);
        });
</script>